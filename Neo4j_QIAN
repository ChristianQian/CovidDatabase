CREATE CONSTRAINT const_region IF NOT EXISTS ON (n:Region) ASSERT (n.code, n.province, n.city) IS NODE KEY;
LOAD CSV WITH HEADERS FROM "file:/Region.csv" as l
CREATE (:Region{code:toInteger(l.code), province:l.province, city:l.city,
elementary_school_count:toInteger(l.elementary_school_count),
kindergarten_count:toInteger(l.kindergarten_count),
university_count:toInteger(l.university_count)})


CREATE CONSTRAINT const_pid IF NOT EXISTS ON (n:Patient) ASSERT (n.patient_id) IS NODE KEY;
LOAD CSV WITH HEADERS FROM "file:/Patient.csv" as l
CREATE (patient:Patient{patient_id:toInteger(l.patient_id), sex:l.sex, age:toInteger(l.age), country:l.country})


//ne pas merge on veut que comme chaque Infection node soit unique + contact_number = 0 si null + erreur patient_id dans contact_number
LOAD CSV WITH HEADERS FROM "file:/Infection.csv" as l
MERGE (region:Region{code:toInteger(l.code)} )
MERGE (patient:Patient{patient_id:toInteger(l.patient_id)} )
CREATE (infection:Infection{infection_case:l.infection_case, confirmed_date:date(l.confirmed_date),
released_date:date(l.released_date), deceased_date:date(l.deceased_date), state:l.state})
SET infection.contact_number = 
    CASE WHEN l.contact_number is null OR toInteger(l.contact_number) > 2000 THEN 0
    ELSE toInteger(l.contact_number) END
CREATE (infection) -[:location]-> (region)
CREATE (infection) -[:infect]-> (patient)


LOAD CSV WITH HEADERS FROM "file:/InfectionOrigin.csv" as l
MERGE (region:Region{code:toInteger(l.code)})
MERGE (patient:Patient{patient_id:toInteger(l.patient_id)})
MERGE (orig:Patient{patient_id:toInteger(l.infected_by)})
CREATE (infection:InfectionOrigin{infection_case:l.infection_case, confirmed_date:date(l.confirmed_date),
released_date:date(l.released_date), deceased_date:date(l.deceased_date), state:l.state})
//au moins 1 contact car origine
SET infection.contact_number = 
    CASE WHEN l.contact_number is null OR toInteger(l.contact_number)=0 OR toInteger(l.contact_number) > 2000 THEN 1
    ELSE toInteger(l.contact_number) END
CREATE (infection) -[:location]-> (region)
CREATE (infection) -[:infect]-> (patient)
CREATE (infection) -[:origin]-> (orig)


//QUERY 



//0) Test full-text and normal

CALL db.index.fulltext.drop("full_case");
CALL db.index.fulltext.createNodeIndex("full_case",["Infection"],["infection_case"]);

PROFILE
MATCH (i:Infection)
WHERE i.infection_case CONTAINS 'Hospital'
RETURN i limit 100


DROP INDEX idx_icase;
CREATE INDEX idx_icase FOR (i:Infection) ON (i.infection_case);

CALL db.index.fulltext.queryNodes("full_case", 'infection_case:"Hospital"') YIELD node
RETURN node



DROP INDEX idx_age;
DROP INDEX idx_elem;
DROP INDEX idx_kdg;

//1) personnes agées de plus de 50 ans et infecté dans les villes avec au moins de 150 elem ou kinderg
MATCH p=(a:Patient)<-[:infect]-(i)-[:location]->(r:Region) 
WHERE a.age > 50 AND (r.elementary_school_count > 150 OR r.kindergarten_count > 150)  
RETURN p limit 100

CREATE INDEX idx_age FOR (p:Patient) ON (p.age);
CREATE INDEX idx_elem FOR (r:Region) ON (r.elementary_school_count);
CREATE INDEX idx_kdg FOR (r:Region) ON (r.kindergarten_count);



//2) paires d'infectés avec pays différents et pour cause 'contact with patient'
MATCH (a:Patient)<-[:infect]-(i:InfectionOrigin)-[:origin]->(b:Patient)
WHERE a.country<>b.country AND i.infection_case='contact with patient'
RETURN a,i,b limit 100


//3) patients non coréens groupés par lieu d'infection
MATCH (a:Patient)<-[:infect]-(b)-[:location]->(r:Region) WHERE a.country<>'Korea' 
return a.country, r.province, r.city ,count(*) AS count ORDER BY a.country

//4) provinces avec un nombre d'infection supérieur à 100 et finissant par '-do'
MATCH (i)-[:location]->(r:Region) 
WITH r.province AS p, count(*) AS nbinfecte 
WHERE nbinfecte > 100 AND p ENDS WITH '-do' 
RETURN p, nbinfecte 
ORDER BY nbinfecte DESC

//5) parmi les chemins de 3 patients avec une personne décédée exactement
MATCH p=(a:Patient)-[:infect|origin*4]-(b:Patient)
WHERE SINGLE(node in nodes(p) WHERE ('InfectionOrigin' in labels(node)) AND node.state='deceased') 
RETURN p
LIMIT 50

//6) les 5 chemin de 3 patients avec les nombres maximals de contact
MATCH p=(a:Patient)-[:infect|origin*4]-(b:Patient)
WITH p,[node IN nodes(p) WHERE ('InfectionOrigin' in labels(node))] AS inf, [node IN nodes(p) WHERE ('Patient' in labels(node))] AS pa
RETURN pa AS NombrePatient, reduce(total = 0, n IN inf | total + n.contact_number) AS TotalContact
ORDER BY TotalContact DESC
LIMIT 5

//ADD PATH SKIP INFECTION NODE
MATCH (a:Patient)<-[:infect]-(i:InfectionOrigin)-[:origin]->(b:Patient),
(i) -[:location]-> (r:Region)
MERGE (a)<-[:direct{confirmed_date : i.confirmed_date, contact_number: i.contact_number,
 state: i.state, province: r.province, city: r.city}]-(b)
    

//7) Reecriture de la 6 avec :direct 
MATCH p=(a:Patient)-[:direct*2]-(b:Patient) 
WITH p, reduce(total = 0, r IN relationships(p) | total + r.contact_number) AS TotalContact
RETURN nodes(p) AS NombrePatient , TotalContact
ORDER BY TotalContact DESC
LIMIT 5     
  
//8) path 5 patients ou moins, avec au moins une persone agée de 20-30 ans, infecté entre juin-aout 2020 
MATCH p=(a:Patient)-[:direct*..4]->(b:Patient) 
WHERE ALL(r IN relationships(p) WHERE r.confirmed_date.year=2020 AND r.confirmed_date.month>=6 AND r.confirmed_date.month <= 8 )
AND ANY(n IN nodes(p) WHERE n.age>=20 AND n.age<=30)
RETURN p
LIMIT 200

 
//9) path de longueur 6 avec les dates de contamination strictement croissantes
MATCH p=(a:Patient)-[:direct*6]-(b:Patient)
WITH p, [one IN relationships(p) | one.confirmed_date] AS r
WHERE ALL(i in range(0, size(r)-2) WHERE r[i] < r[i+1])
RETURN p
LIMIT 100
    
//10) le chemin le plus long avec la date de premiere et derniere infection
MATCH p=(a:Patient)-[:direct*7..]-(b:Patient)
WITH p, [one IN relationships(p) | one.confirmed_date] AS l
UNWIND l as date
RETURN length(p), size(nodes(p)) AS NombrePatient, min(date) AS Debut, max(date) AS Fin
ORDER BY length(p) DESC 
LIMIT 1



//RECURSIVE
PROFILE
MATCH p=(a:Patient{patient_id:4100000006})-[:direct*..5]->(b:Patient)
WHERE ALL(one IN relationships(p) WHERE one.province='Chungcheongnam-do' AND (one.city='Asan-si' OR one.city='Cheonan-si'))
AND ALL(one IN nodes(p) WHERE one.country='Korea' AND one.age<=50)
RETURN p




//GDS


//PAGERANK PATIENT

//création native en 26ms, pas de valeurs date/string (pas autorisés) 
CALL gds.graph.create(
    'infection_direct', 
    {Patient:{
                label: 'Patient',
                properties: ['age']
    }},
    {direct:{
                type: 'direct',
                orientation: 'UNDIRECTED',
                properties: ['contact_number']
     }}
)YIELD graphName, nodeCount, relationshipCount, createMillis;


CALL gds.graph.drop('infection_direct_cypher')
//création cypher en 499ms
CALL gds.graph.create.cypher(
    'infection_direct_cypher',
    'MATCH (p:Patient) WHERE (p)-[:path]-() RETURN id(p) AS id',
    'MATCH (p)-[d:direct]->(q) RETURN id(p) AS source, id(q) AS target, type(d) AS type'
)YIELD graphName, nodeCount, relationshipCount, createMillis;

//pageRank avec le degree du noeud
CALL gds.pageRank.stream('infection_direct') YIELD nodeId, score AS pageRank
WITH gds.util.asNode(nodeId) AS n, pageRank
MATCH (n)-[d:direct]-()
RETURN n.patient_id AS id, pageRank, count(d) AS degree
ORDER BY pageRank DESC

//WRITE pageRank result avec max/p95/min pour le range dans rule-based style
CALL gds.pageRank.write('infection_direct', {writeProperty: 'pageRank'}) 
YIELD writeMillis, nodePropertiesWritten, ranIterations, didConverge, centralityDistribution
RETURN centralityDistribution.max, centralityDistribution.p95, centralityDistribution.min

//Query pour bloom
//Query simple dans la barre
Foyers top $max

//Utiliser Static Search phrase pour les queries Cypher
//appliquer la phrase dans la barre de recherche
MATCH (a:Patient) WHERE EXISTS (a.pageRank) 
WITH a ORDER BY a.pageRank DESC LIMIT $max
MATCH p=(a)-[:direct*]-(b) 
RETURN p






//PAGERANK REGION & INTERACTIONS


//for pageRank cities, all infections counted
CALL gds.graph.create(
    'region_inf', 
    ['Region','Infection','InfectionOrigin'],
    {location:{
                type: 'location',
                orientation: 'UNDIRECTED'
     }}
)YIELD graphName, nodeCount, relationshipCount, createMillis;

//ville avec leur cas d'infection
CALL gds.pageRank.stream('region_inf') YIELD nodeId, score AS pageRank
WITH gds.util.asNode(nodeId) AS n, pageRank
MATCH (n)<-[l:location]-()
RETURN n.province, n.city, pageRank, count(l) AS degree
ORDER BY pageRank DESC

//WRITE pageRank result avec max/min pour le range dans rule-based style
CALL gds.pageRank.write('region_inf', {writeProperty: 'pageRank'}) 
YIELD writeMillis, nodePropertiesWritten, ranIterations, didConverge, centralityDistribution
RETURN centralityDistribution.max, centralityDistribution.min, centralityDistribution
//281.8574209213257 le minimum pageRAnk pour une ville :0.9670543998479844, pour la valeur milieu 100

//LANCER POUR ECRIRE + REFRESH SUR BLOOM
CALL gds.pageRank.write('region_inf', {writeProperty: 'pageRank'}) 


//create weight with transmission between cities
MATCH p=(r1:Region)<--(i1:InfectionOrigin)-->(a:Patient)<--(i2:InfectionOrigin)-->(r2:Region) 
WHERE r1.code<>r2.code 
WITH r1,r2,count(*) AS weight
MERGE p=(r1)-[:migration{weight:weight}]-(r2)
RETURN p

//SUR BLOOM
// Afficher d'abord les villes $topPagerank
MATCH (r:Region) WHERE EXISTS(r.pageRank)
RETURN p ORDER BY r.pageRank DESC LIMIT $topPagerank

// Afficher les top $topPagerank villes et ses interactions avec $interactions villes
MATCH (r:Region) WHERE EXISTS (r.pageRank)
WITH r ORDER BY r.pageRank DESC LIMIT $topPagerank 
MATCH interactPath=(r)-[m:migration]->(r2:Region)
WITH interactPath,r,m,r2 ORDER BY m.weight DESC
WITH COLLECT(interactPath)[0..$interactions] AS topInteractions, r
RETURN topInteractions

